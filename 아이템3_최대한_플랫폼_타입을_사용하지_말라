코틀린의 등장과 함께 소개된 널 안정성은 코틀린의 주요 기능 중 하나이다. 자바에서 자주 볼 수 있었던 널 포인터 예외는 코틀린에서 null-safety 메커니즘으로 인해 거의 찾아보기 힘들다. 하지만 null-safety 메커니즘이 없는 자바, C 등의 프로그래밍 언어와 코틀린을 연결해서 사용할 때는 이러한 예외가 발생할 수 있다. 만약 자바에서 String 타입을 리턴하는 메서드가 있다고 가정해보자. 코틀린에서 이를 사용하려면 어떻게 해야할까?

@Nullable 어노테이션이 붙어있다면, 이를 nullable로 추정하고 String? 으로 변경하면 된다. @NotNull 어노테이션이 붙어있다면, String으로 변경하면 된다. 그런데 만약 어노테이션이 붙어 있지 않다면 어떻게 해야 할까?

```kotlin
// 자바
public class JavaTest {
	public String giveName() {
		}
}
```

자바에서는 모든 것이 nullable 일 수 있으므로 최대한 안전하게 접근한다면, 이를 nullable로 가정하고 다루어야 한다. 하지만 어떤 메서드는 nyll을 리턴하지 않을 것이 확실할 수 있다. 이러한 경우에는 마지막에 not-null 단정을 나타내는 !!를 붙인다. 

nullable과 관련하여 자주 문제가 되는 부분은 바로 자바의 제네릭 타입이다. 자바 API에서 List<User>를 리턴하고, 어노테이션이 따로 붙어 있지 않은 경우를 생각해보자. 디폴트로 모든 타입을 nullable로 다룬다면, 우리는 이를 사용할 때 이러한 리스트와 리스트 내부의 User 객체들이 널이 아니라는 것을 알야아 한다. 따라서 리스트 자체만 널인지 확인해서는 안되고, 그 내부에 있는 것들도 널인지 확인해야 한다.

```kotlin
// 자바
public class UserRepo {

	public List<User> getUsers() {

		}
}

// 코틀린
val users: List<User> = UserRepo().users!!.filterNotNull()
```

조금 더 나아가서, 만약 함수가 List<List<User>>를 리턴한다면 어떨까? 훨씬 복잡해 질 것이다.

```kotlin
val users: List<List<User>> = UserRepo().groupedUsers!!.map { it!!.filterNotNull() }
```

리스트는 적어도 map과 filterNotNull 등의 메서드를 제공한다. 다른 제네릭 타입이라면, 널을 확인하는 것 자체가 정말로 복잡한 일이 된다. 그래서 코틀린은 자바 등의 다른 프로그래밍 언어에서 넘어온 타입들을 특수하게 다룬다. 이러한 타입을 플랫폼 타입 이라고 부른다.

<aside>
💡 플랫폼 타입이란, 다른 프로그래밍 언어에서 전달되어서 nullable인지 아닌지 알 수 없는 타입을 말한다.

</aside>

플랫폼 타입은 String! 처럼 타입 이름 뒤에 ! 기호를 붙여서 표기한다. 물론 이러한 노테이션이 직접적으로 코드에 나타나지는 않는다. 대신 다음 코드와 같은 형태로 이를 선택적으로 사용한다.

```kotlin
// 자바
public class UserRepo {
	public User getUser() {
	}
}

// 코틀린
val repo = UserRepo()
val user1 = repo.user        // user1의 타입은 User!
val user2: User = repo.user  // user2의 타입은 User
val user3: User? = repo.user // user3의 타입은 user?
```

이러한 코드를 사용할 수 있으므로, 이전에 언급했던 문제가 사라진다.

```kotlin
val users: List<User> = UserRepo().users
val users: List<List<User>> = UserRepo().groupedUsers
```

문제는 null이 아니라고 생각되는 것이 null일 가능성이 있으므로, 여전히 위험하다. 그래서 플랫폼 타입을 사용할 때는 항상 주의를 기울여야 한다. 설계자가 명시적으로 어노테이션을 표시하거나, 주석으로 달아두지 않으면, 언제든지 동작이 변경될 가능성이 있다. 따라서 함수가 지금 당장 null을 리턴하지 않아도, 미래에는 변경될 수도 있다는 것을 염두해 둬야한다.

자바를 코틀린과 함께 사용할 때, 자바 코드를 직접 조작할 수 있다면, 가능한 @Nullable 과 @NotNull 어노테이션을 붙여서 사용하길 바란다.